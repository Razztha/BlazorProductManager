@page "/Products"
@rendermode InteractiveServer

@using BlazorProductManager.Models
@using BlazorProductManager.Services
@inject ProductService productService;

<h3>Products Manager</h3>
<AddProduct ProductId="@ProductId" OnProductAddCallBack="@ProductRefresh" OnProductUpdateCallBack="@ProductUpdate" />
<table class="table">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Name</th>
            <th scope="col">Code</th>
            <th scope="col">Price</th>
            <th scope="col">Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Products)
        {
            <tr>
                <th scope="row">@item.Id</th>
                <td>@item.Name</td>
                <td>@item.Code</td>
                <td>@item.Price</td>
                <button type="button" @onclick="(() => OnEdit(item.Id))" class="btn btn-info">Edit</button>
                <button type="button" @onclick="(() => OnDelete(item.Id))" class="btn btn-warning">Delete</button>
            </tr>
        }
    </tbody>
</table>

@code {

    public List<Product> Products { get; set; } = new List<Product>();
    private int ProductId { get ;set;} = 0;

    protected override async Task OnInitializedAsync()
    {
        Products = productService.GetAllProducts();
    }

    private void ProductRefresh(Product product)
    {
        Products.Add(product);
    }

    private void ProductUpdate(Product product)
    {
        Products.Remove(product);
        Products.Add(product);
        ProductId = 0;
    }

    private void OnDelete(int id)
    {
        productService.DeleteProduct(id);
        var deletedProduct = Products.FirstOrDefault(c => c.Id == id);
        if (deletedProduct != null)
            Products.Remove(deletedProduct);
    }

    private void OnEdit(int id)
    {
        ProductId = id;
    }
}
